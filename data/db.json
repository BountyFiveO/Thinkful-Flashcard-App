{
	"decks": [
		{
			"id": 1,
			"name": "Rendering in React",
			"description": "React's component structure allows for quickly building a complex web application that relies on DOM manipulation. "
		},
		{
			"name": "React Router",
			"description": "React Router is a collection of navigational components that compose declaratively with your application.",
			"id": 2
		},
		{
			"name": "JavaScript Basics",
			"description": "JavaScript is a scripting or programming language that allows you to implement complex features on web pages. Javascript Basics will cover the basics of JavaScript, including variables, objects, functions, and more.",
			"id": 3
		},
		{
			"name": "React Basics",
			"description": "React is a JavaScript library for building user interfaces. React Basics will cover the basics of React, including components, props, and state.",
			"id": 4
		},
		{
			"name": "HTML Basics",
			"description": "HTML is the standard markup language for creating Web pages. HTML Basics will cover the basics of HTML, including elements, attributes, and more.",
			"id": 5
		}
	],

	"cards": [
		{
			"id": 1,
			"front": "Differentiate between Real DOM and Virtual DOM.",
			"back": "Virtual DOM updates are faster but do not directly update the HTML",
			"deckId": 1
		},
		{
			"id": 2,
			"front": "How do you modify the state of a different React component?",
			"back": "Not at all! State is visible to the component only.",
			"deckId": 1
		},
		{
			"id": 3,
			"front": "How do you pass data 'down' to a React child component?",
			"back": "As properties or props",
			"deckId": 1
		},
		{
			"front": "What path will match the follow Route?\n<Route>\n  <NotFound />\n</Route>",
			"back": "All paths. A route with no path matches all URL's",
			"deckId": 2,
			"id": 4
		},
		{
			"front": "What does <Switch> do?",
			"back": "Renders the first matching child <Route> ",
			"deckId": 2,
			"id": 5
		},
		{
			"front": "What is the difference between a class and an object?",
			"back": "A class is a blueprint for an object",
			"deckId": 3,
			"id": 6
		},
		{
			"front": "What is used to define a block of code to be executed if a specified condition is true?",
			"back": "if statement",
			"deckId": 3,
			"id": 7
		},
		{
			"front": "How do you assign a value to a variable?",
			"back": "Use the assignment operator (=)",
			"deckId": 3,
			"id": 8
		},
		{
			"front": "How do you create a new object?",
			"back": "Use the new keyword",
			"deckId": 3,
			"id": 9
		},
		{
			"front": "What is the difference between == and ===?",
			"back": "The triple equals operator compares for equality without type conversion",
			"deckId": 3,
			"id": 10
		},
		{
			"front": "What is the difference between var, let, and const?",
			"back": "var is function scoped, let and const are block scoped",
			"deckId": 3,
			"id": 11
		},
		{
			"front": "What is the difference between null and undefined?",
			"back": "null is an assignment value. undefined is a value automatically given to variables.",
			"deckId": 3,
			"id": 12
		},
		{
			"front": "What is the difference between a parameter and an argument?",
			"back": "A parameter is a variable in a method definition. An argument is the actual value of this variable that gets passed to function.",
			"deckId": 3,
			"id": 13
		},
		{
			"front": "What is the difference between the map, filter, and reduce array methods?",
			"back": "map transforms each element of an array into another value, filter filters out elements based on a condition, reduce reduces an array to a single value",
			"deckId": 3,
			"id": 14
		},
		{
			"front": "What is the difference between an arrow function and a regular function?",
			"back": "Arrow functions are anonymous and do not have their own this, arguments, super, or new.target. They also do not have a prototype property.",
			"deckId": 3,
			"id": 15
		},
		{
			"front": "What is the difference between a promise and a callback?",
			"back": "A promise is a returned object to which you attach callbacks, instead of passing callbacks into a function.",
			"deckId": 3,
			"id": 16
		},
		{
			"front": "What is an example of a JavaScript primitive data type?",
			"back": "A number, string, boolean, null, or, undefined",
			"deckId": 3,
			"id": 17
		},
		{
			"front": "What is an example of a JavaScript non-primitive data type?",
			"back": "An array or object",
			"deckId": 3,
			"id": 18
		},
		{
			"front": "What is the difference between a prop and a state?",
			"back": "Props are passed to a component. State is managed within a component.",
			"deckId": 4,
			"id": 19
		},
		{
			"front": "What is the purpose of the render() method?",
			"back": "render() is the only required method in a class component. It outputs a React element, which is a lightweight description of what to render to the DOM.",
			"deckId": 4,
			"id": 20
		},
		{
			"front": "What is the purpose of the super() method?",
			"back": "super() is used to call the constructor of a parent class.",
			"deckId": 4,
			"id": 21
		},
		{
			"front": "What is the purpose of the componentDidMount() method?",
			"back": "componentDidMount() is invoked immediately after a component is mounted (inserted into the tree).",
			"deckId": 4,
			"id": 22
		},
		{
			"front": "What is the purpose of the componentWillUnmount() method?",
			"back": "componentWillUnmount() is invoked immediately before a component is unmounted and destroyed.",
			"deckId": 4,
			"id": 23
		},
		{
			"front": "What is the purpose of the componentDidUpdate() method?",
			"back": "componentDidUpdate() is invoked immediately after updating occurs. This method is not called for the initial render.",
			"deckId": 4,
			"id": 24
		},
		{
			"front": "What is the purpose of the shouldComponentUpdate() method?",
			"back": "shouldComponentUpdate() is invoked before rendering when new props or state are being received. Returns a boolean value.",
			"deckId": 4,
			"id": 25
		},
		{
			"front": "What is the purpose of the componentDidCatch() method?",
			"back": "componentDidCatch() is invoked after an error has been thrown by a descendant component.",
			"deckId": 4,
			"id": 26
		},
		{
			"front": "What is a <div> tag?",
			"back": "A <div> tag is an HTML element that defines a division or a section in an HTML document.",
			"deckId": 5,
			"id": 27
		},
		{
			"front": "What is a <span> tag?",
			"back": "A <span> tag is an inline HTML element used to group inline-elements in a document.",
			"deckId": 5,
			"id": 28
		},
		{
			"front": "What is a <button> tag?",
			"back": "A <button> tag is an HTML element that defines a clickable button.",
			"deckId": 5,
			"id": 29
		},
		{
			"front": "What is a <form> tag?",
			"back": "A <form> tag is an HTML element that defines a form that is used to collect user input.",
			"deckId": 5,
			"id": 30
		},
		{
			"front": "What is a <select> tag?",
			"back": "A <select> tag is an HTML element that creates a drop-down list.",
			"deckId": 5,
			"id": 31
		},
		{
			"front": "What is a <label> tag?",
			"back": "A <label> tag is an HTML element that defines a label for an <input> element.",
			"deckId": 5,
			"id": 32
		},
		{
			"front": "What is a <ul> tag?",
			"back": "A <ul> tag is an HTML element that defines an unordered list.",
			"deckId": 5,
			"id": 33
		},
		{
			"front": "What is a <li> tag?",
			"back": "A <li> tag is an HTML element that defines a list item.",
			"deckId": 5,
			"id": 34
		},
		{
			"front": "What is a <table> tag?",
			"back": "A <table> tag is an HTML element that defines a table.",
			"deckId": 5,
			"id": 35
		},
		{
			"front": "What is a <thead> tag?",
			"back": "A <thead> tag is an HTML element that defines a table header.",
			"deckId": 5,
			"id": 36
		},
		{
			"front": "How do you use a <link> tag and where is it placed?",
			"back": "A <link> tag is used to link to external stylesheets. It is placed in the <head> section of an HTML document.",
			"deckId": 5,
			"id": 37
		},
		{
			"name": "How do you assign a <div> tag a class or id?",
			"back": "You use the class or id attributes to assign a class or id to a <div> tag.",
			"deckId": 5,
			"id": 38
		},

		{
			"cards": [],
			"front": "b",
			"back": "b",
			"deckId": 1,
			"id": 7
		}
	]
}
