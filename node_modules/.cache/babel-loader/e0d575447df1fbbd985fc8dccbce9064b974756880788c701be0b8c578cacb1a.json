{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bount\\\\Documents\\\\GitHub\\\\Thinkful-Flashcard-App\\\\src\\\\Home.js\",\n  _s = $RefreshSig$();\n//-------------------START IMPORTS-----------------\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport DeckInfoCard from \"./home/DeckInfoCard\";\nimport { listDecks, deleteDeck } from \"./utils/api/index\";\nimport StructureInfoCard from \"./home/DeckInfoCardStructure\";\nimport \"./style.css\";\n//-------------------END IMPORTS-----------------\n\n//-------------------START FUNCTION HOME-----------------\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  const [decks, setDecks] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n\n  //Loads deck information. Triggers a re-render when they are loaded\n  useEffect(() => {\n    setDecks([]);\n    const abortController = new AbortController(); //assign a variable abortController to the result of AbortController\n\n    async function loadDecks() {\n      //create an async function called loadDecks that will be called when the useEffect function is called\n      try {\n        let _decks = await listDecks(abortController.signal); //await the result of listDecks and assign it to _decks\n        setDecks(_decks);\n        setLoaded(true);\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          //if the error name is equal to AbortError, then console.log aborted\n          console.info(\"Aborted\");\n        } else {\n          //if the error name is not equal to AbortError, then the error will be thrown\n          throw error;\n        }\n      }\n    }\n    loadDecks(); //call the loadDecks function\n    return () => {\n      //return a function that will abort the controller\n      console.info(\"aborting\");\n      abortController.abort();\n    };\n  }, []);\n  async function handleDeleteDeck(id) {\n    //create a function called handleDeleteDeck that takes in an id as a parameter\n    if (\n    //if the window.confirm returns true, then the deleteDeck function will be called with the id as a parameter\n    window.confirm(\"Delete this deck?\\n\\nYou will not be able to recover it.\")) {\n      await deleteDeck(id); //await the result of deleteDeck and assign it to _decks\n      setDecks(() => decks.filter(deck => deck.id !== id)); //set the decks state to the result of the filter function\n    }\n  }\n\n  //use the map function to create a new array of deck info cards from the decks array and pass the handleDeleteDeck function as a prop\n  const rows = decks.map(deck => DeckInfoCard({\n    ...deck,\n    handleDeleteDeck\n  }));\n\n  //Before loading, add skeleton deck info cards\n  if (!loaded) {\n    for (let i = 0; i < 3; i++) {\n      //for loop that will run 3 times\n      rows.push( /*#__PURE__*/_jsxDEV(StructureInfoCard, {}, i + 10, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 14\n      }, this)); //push a skeleton deck info card to the rows array\n    }\n  }\n  //--------------------START RETURN-----------------\n  return (\n    /*#__PURE__*/\n    //return the following JS\n    _jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/decks/new\",\n        className: \"btn btn-secondary\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"bi bi-plus-lg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 6\n        }, this), \" Create Deck\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row my-4\",\n        children: rows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 4\n    }, this)\n  );\n  //-------------------END RETURN-----------------\n}\n//-------------------END FUNCTION HOME-----------------\n\n//-------------------EXPORT HOME-----------------\n_s(Home, \"A7gaMIhOdjEbpRVBOfM1UcwaDdw=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useState","Link","DeckInfoCard","listDecks","deleteDeck","StructureInfoCard","Home","decks","setDecks","loaded","setLoaded","abortController","AbortController","loadDecks","_decks","signal","error","name","console","info","abort","handleDeleteDeck","id","window","confirm","filter","deck","rows","map","i","push"],"sources":["C:/Users/bount/Documents/GitHub/Thinkful-Flashcard-App/src/Home.js"],"sourcesContent":["//-------------------START IMPORTS-----------------\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport DeckInfoCard from \"./home/DeckInfoCard\";\r\nimport { listDecks, deleteDeck } from \"./utils/api/index\";\r\nimport StructureInfoCard from \"./home/DeckInfoCardStructure\";\r\nimport \"./style.css\";\r\n//-------------------END IMPORTS-----------------\r\n\r\n//-------------------START FUNCTION HOME-----------------\r\nfunction Home() {\r\n\tconst [decks, setDecks] = useState([]);\r\n\tconst [loaded, setLoaded] = useState(false);\r\n\r\n\t//Loads deck information. Triggers a re-render when they are loaded\r\n\tuseEffect(() => {\r\n\t\tsetDecks([]);\r\n\t\tconst abortController = new AbortController(); //assign a variable abortController to the result of AbortController\r\n\r\n\t\tasync function loadDecks() {\r\n\t\t\t//create an async function called loadDecks that will be called when the useEffect function is called\r\n\t\t\ttry {\r\n\t\t\t\tlet _decks = await listDecks(abortController.signal); //await the result of listDecks and assign it to _decks\r\n\t\t\t\tsetDecks(_decks);\r\n\t\t\t\tsetLoaded(true);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tif (error.name === \"AbortError\") {\r\n\t\t\t\t\t//if the error name is equal to AbortError, then console.log aborted\r\n\t\t\t\t\tconsole.info(\"Aborted\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//if the error name is not equal to AbortError, then the error will be thrown\r\n\t\t\t\t\tthrow error;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tloadDecks(); //call the loadDecks function\r\n\t\treturn () => {\r\n\t\t\t//return a function that will abort the controller\r\n\t\t\tconsole.info(\"aborting\");\r\n\t\t\tabortController.abort();\r\n\t\t};\r\n\t}, []);\r\n\r\n\tasync function handleDeleteDeck(id) {\r\n\t\t//create a function called handleDeleteDeck that takes in an id as a parameter\r\n\t\tif (\r\n\t\t\t//if the window.confirm returns true, then the deleteDeck function will be called with the id as a parameter\r\n\t\t\twindow.confirm(\"Delete this deck?\\n\\nYou will not be able to recover it.\")\r\n\t\t) {\r\n\t\t\tawait deleteDeck(id); //await the result of deleteDeck and assign it to _decks\r\n\t\t\tsetDecks(() => decks.filter((deck) => deck.id !== id)); //set the decks state to the result of the filter function\r\n\t\t}\r\n\t}\r\n\r\n\t//use the map function to create a new array of deck info cards from the decks array and pass the handleDeleteDeck function as a prop\r\n\tconst rows = decks.map((deck) => DeckInfoCard({ ...deck, handleDeleteDeck }));\r\n\r\n\t//Before loading, add skeleton deck info cards\r\n\tif (!loaded) {\r\n\t\tfor (let i = 0; i < 3; i++) {\r\n\t\t\t//for loop that will run 3 times\r\n\t\t\trows.push(<StructureInfoCard key={i + 10} />); //push a skeleton deck info card to the rows array\r\n\t\t}\r\n\t}\r\n\t//--------------------START RETURN-----------------\r\n\treturn (\r\n\t\t//return the following JS\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<Link\r\n\t\t\t\t\tto=\"/decks/new\"\r\n\t\t\t\t\tclassName=\"btn btn-secondary\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<i className=\"bi bi-plus-lg\"></i> Create Deck\r\n\t\t\t\t</Link>\r\n\t\t\t\r\n\t\t\t<div className=\"row my-4\">{rows}</div>\r\n\t\t\t</div>\r\n\t\r\n\t);\r\n\t//-------------------END RETURN-----------------\r\n}\r\n//-------------------END FUNCTION HOME-----------------\r\n\r\n//-------------------EXPORT HOME-----------------\r\nexport default Home;\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,SAASC,SAAS,EAAEC,UAAU,QAAQ,mBAAmB;AACzD,OAAOC,iBAAiB,MAAM,8BAA8B;AAC5D,OAAO,aAAa;AACpB;;AAEA;AAAA;AACA,SAASC,IAAI,GAAG;EAAA;EACf,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;;EAE3C;EACAD,SAAS,CAAC,MAAM;IACfS,QAAQ,CAAC,EAAE,CAAC;IACZ,MAAMG,eAAe,GAAG,IAAIC,eAAe,EAAE,CAAC,CAAC;;IAE/C,eAAeC,SAAS,GAAG;MAC1B;MACA,IAAI;QACH,IAAIC,MAAM,GAAG,MAAMX,SAAS,CAACQ,eAAe,CAACI,MAAM,CAAC,CAAC,CAAC;QACtDP,QAAQ,CAACM,MAAM,CAAC;QAChBJ,SAAS,CAAC,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOM,KAAK,EAAE;QACf,IAAIA,KAAK,CAACC,IAAI,KAAK,YAAY,EAAE;UAChC;UACAC,OAAO,CAACC,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC,MAAM;UACN;UACA,MAAMH,KAAK;QACZ;MACD;IACD;IACAH,SAAS,EAAE,CAAC,CAAC;IACb,OAAO,MAAM;MACZ;MACAK,OAAO,CAACC,IAAI,CAAC,UAAU,CAAC;MACxBR,eAAe,CAACS,KAAK,EAAE;IACxB,CAAC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,eAAeC,gBAAgB,CAACC,EAAE,EAAE;IACnC;IACA;IACC;IACAC,MAAM,CAACC,OAAO,CAAC,0DAA0D,CAAC,EACzE;MACD,MAAMpB,UAAU,CAACkB,EAAE,CAAC,CAAC,CAAC;MACtBd,QAAQ,CAAC,MAAMD,KAAK,CAACkB,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACJ,EAAE,KAAKA,EAAE,CAAC,CAAC,CAAC,CAAC;IACzD;EACD;;EAEA;EACA,MAAMK,IAAI,GAAGpB,KAAK,CAACqB,GAAG,CAAEF,IAAI,IAAKxB,YAAY,CAAC;IAAE,GAAGwB,IAAI;IAAEL;EAAiB,CAAC,CAAC,CAAC;;EAE7E;EACA,IAAI,CAACZ,MAAM,EAAE;IACZ,KAAK,IAAIoB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC3B;MACAF,IAAI,CAACG,IAAI,eAAC,QAAC,iBAAiB,MAAMD,CAAC,GAAG,EAAE;QAAA;QAAA;QAAA;MAAA,QAAI,CAAC,CAAC,CAAC;IAChD;EACD;EACA;EACA;IAAA;IACC;IACC;MAAK,SAAS,EAAC,KAAK;MAAA,wBACnB,QAAC,IAAI;QACJ,EAAE,EAAC,YAAY;QACf,SAAS,EAAC,mBAAmB;QAAA,wBAE7B;UAAG,SAAS,EAAC;QAAe;UAAA;UAAA;UAAA;QAAA,QAAK,gBAClC;MAAA;QAAA;QAAA;QAAA;MAAA,QAAO,eAER;QAAK,SAAS,EAAC,UAAU;QAAA,UAAEF;MAAI;QAAA;QAAA;QAAA;MAAA,QAAO;IAAA;MAAA;MAAA;MAAA;IAAA;EAChC;EAGR;AACD;AACA;;AAEA;AAAA,GAzESrB,IAAI;AAAA,KAAJA,IAAI;AA0Eb,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}