{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/bount/Documents/GitHub/Thinkful-Flashcard-App/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/bount/Documents/GitHub/Thinkful-Flashcard-App/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/Users/bount/Documents/GitHub/Thinkful-Flashcard-App/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";//------------------------START IMPORTS------------------------\nimport React,{useState,useEffect}from\"react\";import{Link,useHistory,useParams}from\"react-router-dom\";import CardForm from\"./CardForm\";import{readCard,readDeck,updateCard}from\"../../utils/api/index\";//------------------------END IMPORTS------------------------\n//------------------------START FUNCTION EDITCARD------------------------\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function EditCard(){var history=useHistory();var _useParams=useParams(),deckId=_useParams.deckId,cardId=_useParams.cardId;var _useState=useState({}),_useState2=_slicedToArray(_useState,2),deck=_useState2[0],setDeck=_useState2[1];var _useState3=useState({}),_useState4=_slicedToArray(_useState3,2),card=_useState4[0],setCard=_useState4[1];var name=deck.name?deck.name:\"Deck\";// if name is equal to deck.name, then return deck.name, if not, then return \"Deck\"\n//One useEffect for both loading the deck and the card as they are connected and should both be aborted when leaving this Component\nuseEffect(function(){var abortController=new AbortController();//Load the deck for navbar information\nfunction loadDeck(){return _loadDeck.apply(this,arguments);}//load the card for the form and the card information\nfunction _loadDeck(){_loadDeck=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var deckInfo;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return readDeck(deckId,abortController.signal);case 3:deckInfo=_context.sent;//assign a variable deckInfo to the result of readDeck once the data is passed in the setDeck the value of deckInfo will be passed in\nsetDeck(deckInfo);//this sets the value of deck to deckInfo\n_context.next=14;break;case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);if(!(_context.t0.name===\"AbortError\")){_context.next=13;break;}//if the error name is equal to AbortError, then the console will log aborted\nconsole.info(\"aborted\");//if the error name is not equal to AbortError, then the error will be thrown\n_context.next=14;break;case 13:throw _context.t0;case 14:case\"end\":return _context.stop();}}},_callee,null,[[0,7]]);}));return _loadDeck.apply(this,arguments);}function loadCard(){return _loadCard.apply(this,arguments);}function _loadCard(){_loadCard=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var cardInfo;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return readCard(cardId,abortController.signal);case 3:cardInfo=_context2.sent;setCard(cardInfo);_context2.next=14;break;case 7:_context2.prev=7;_context2.t0=_context2[\"catch\"](0);if(!(_context2.t0.name===\"AbortError\")){_context2.next=13;break;}console.info(\"aborted\");_context2.next=14;break;case 13:throw _context2.t0;case 14:case\"end\":return _context2.stop();}}},_callee2,null,[[0,7]]);}));return _loadCard.apply(this,arguments);}loadDeck();//loads the deck information\nloadCard();//loads the card information\nreturn function(){return abortController.abort();};//returns the abortController to abort the fetch if any of the above functions are not completed\n},[deckId,cardId]);//Updates the card and returns to the deck details screen once the card is updated\nfunction handleSubmit(_x){return _handleSubmit.apply(this,arguments);}//Returns to the deck details screen if the user cancels the edit\nfunction _handleSubmit(){_handleSubmit=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(card){return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return updateCard(card);case 3:history.push(\"/decks/\".concat(deckId));_context3.next=9;break;case 6:_context3.prev=6;_context3.t0=_context3[\"catch\"](0);throw _context3.t0;case 9:case\"end\":return _context3.stop();}}},_callee3,null,[[0,6]]);}));return _handleSubmit.apply(this,arguments);}function handleCancel(){history.push(\"/decks/\".concat(deckId));}//------------------------START RETURN------------------------\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"nav\",{\"aria-label\":\"breadcrumb\",children:/*#__PURE__*/_jsxs(\"ol\",{className:\"breadcrumb\",children:[/*#__PURE__*/_jsx(\"li\",{className:\"breadcrumb-item\",children:/*#__PURE__*/_jsxs(Link,{to:\"/\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"oi oi-home\"}),\" Home\"]})}),/*#__PURE__*/_jsx(\"li\",{className:\"breadcrumb-item\",children:/*#__PURE__*/_jsx(Link,{to:\"/decks/\".concat(deckId),children:name})}),/*#__PURE__*/_jsxs(\"li\",{className:\"breadcrumb-item active\",\"aria-current\":\"page\",children:[\"Edit Card \",cardId]})]})}),/*#__PURE__*/_jsxs(\"h1\",{children:[name,\": Add Card\"]}),/*#__PURE__*/_jsx(CardForm,{handleSubmit:handleSubmit,handleCancel:handleCancel,card:card})]});//------------------------END RETURN------------------------\n}//------------------------END FUNCTION EDITCARD------------------------\n//------------------------START EXPORT------------------------\nexport default EditCard;","map":{"version":3,"names":["React","useState","useEffect","Link","useHistory","useParams","CardForm","readCard","readDeck","updateCard","EditCard","history","deckId","cardId","deck","setDeck","card","setCard","name","abortController","AbortController","loadDeck","signal","deckInfo","console","info","loadCard","cardInfo","abort","handleSubmit","push","handleCancel"],"sources":["C:/Users/bount/Documents/GitHub/Thinkful-Flashcard-App/src/Layout/Cards/EditCard.js"],"sourcesContent":["//------------------------START IMPORTS------------------------\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport CardForm from \"./CardForm\";\r\nimport { readCard, readDeck, updateCard } from \"../../utils/api/index\";\r\n//------------------------END IMPORTS------------------------\r\n\r\n//------------------------START FUNCTION EDITCARD------------------------\r\nfunction EditCard() {\r\n\tconst history = useHistory();\r\n\tconst { deckId, cardId } = useParams();\r\n\tconst [deck, setDeck] = useState({});\r\n\tconst [card, setCard] = useState({});\r\n\r\n\tconst name = deck.name ? deck.name : \"Deck\"; // if name is equal to deck.name, then return deck.name, if not, then return \"Deck\"\r\n\r\n\t//One useEffect for both loading the deck and the card as they are connected and should both be aborted when leaving this Component\r\n\tuseEffect(() => {\r\n\t\tconst abortController = new AbortController();\r\n\r\n\t\t//Load the deck for navbar information\r\n\t\tasync function loadDeck() {\r\n\t\t\ttry {\r\n\t\t\t\tconst deckInfo = await readDeck(deckId, abortController.signal); //assign a variable deckInfo to the result of readDeck once the data is passed in the setDeck the value of deckInfo will be passed in\r\n\t\t\t\tsetDeck(deckInfo); //this sets the value of deck to deckInfo\r\n\t\t\t} catch (error) {\r\n\t\t\t\t//if error is thrown, then the error will be caught and the error will be thrown\r\n\t\t\t\tif (error.name === \"AbortError\") {\r\n\t\t\t\t\t//if the error name is equal to AbortError, then the console will log aborted\r\n\t\t\t\t\tconsole.info(\"aborted\"); //if the error name is not equal to AbortError, then the error will be thrown\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow error;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//load the card for the form and the card information\r\n\t\tasync function loadCard() {\r\n\t\t\ttry {\r\n\t\t\t\tconst cardInfo = await readCard(cardId, abortController.signal);\r\n\t\t\t\tsetCard(cardInfo);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tif (error.name === \"AbortError\") {\r\n\t\t\t\t\tconsole.info(\"aborted\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow error;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tloadDeck(); //loads the deck information\r\n\t\tloadCard(); //loads the card information\r\n\r\n\t\treturn () => abortController.abort(); //returns the abortController to abort the fetch if any of the above functions are not completed\r\n\t}, [deckId, cardId]);\r\n\r\n\t//Updates the card and returns to the deck details screen once the card is updated\r\n\tasync function handleSubmit(card) {\r\n\t\ttry {\r\n\t\t\tawait updateCard(card);\r\n\t\t\thistory.push(`/decks/${deckId}`);\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\t//Returns to the deck details screen if the user cancels the edit\r\n\tfunction handleCancel() {\r\n\t\thistory.push(`/decks/${deckId}`);\r\n\t}\r\n\t//------------------------START RETURN------------------------\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<nav aria-label=\"breadcrumb\">\r\n\t\t\t\t<ol className=\"breadcrumb\">\r\n\t\t\t\t\t<li className=\"breadcrumb-item\">\r\n\t\t\t\t\t\t<Link to=\"/\">\r\n\t\t\t\t\t\t\t<span className=\"oi oi-home\"></span> Home\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"breadcrumb-item\">\r\n\t\t\t\t\t\t<Link to={`/decks/${deckId}`}>{name}</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li\r\n\t\t\t\t\t\tclassName=\"breadcrumb-item active\"\r\n\t\t\t\t\t\taria-current=\"page\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tEdit Card {cardId}\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ol>\r\n\t\t\t</nav>\r\n\t\t\t<h1>{name}: Add Card</h1>\r\n\t\t\t<CardForm\r\n\t\t\t\thandleSubmit={handleSubmit}\r\n\t\t\t\thandleCancel={handleCancel}\r\n\t\t\t\tcard={card}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n\t//------------------------END RETURN------------------------\r\n}\r\n//------------------------END FUNCTION EDITCARD------------------------\r\n\r\n//------------------------START EXPORT------------------------\r\nexport default EditCard;\r\n"],"mappings":"obAAA;AAEA,MAAOA,MAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,IAAI,CAAEC,UAAU,CAAEC,SAAS,KAAQ,kBAAkB,CAC9D,MAAOC,SAAQ,KAAM,YAAY,CACjC,OAASC,QAAQ,CAAEC,QAAQ,CAAEC,UAAU,KAAQ,uBAAuB,CACtE;AAEA;AAAA,wFACA,QAASC,SAAQ,EAAG,CACnB,GAAMC,QAAO,CAAGP,UAAU,EAAE,CAC5B,eAA2BC,SAAS,EAAE,CAA9BO,MAAM,YAANA,MAAM,CAAEC,MAAM,YAANA,MAAM,CACtB,cAAwBZ,QAAQ,CAAC,CAAC,CAAC,CAAC,wCAA7Ba,IAAI,eAAEC,OAAO,eACpB,eAAwBd,QAAQ,CAAC,CAAC,CAAC,CAAC,yCAA7Be,IAAI,eAAEC,OAAO,eAEpB,GAAMC,KAAI,CAAGJ,IAAI,CAACI,IAAI,CAAGJ,IAAI,CAACI,IAAI,CAAG,MAAM,CAAE;AAE7C;AACAhB,SAAS,CAAC,UAAM,CACf,GAAMiB,gBAAe,CAAG,GAAIC,gBAAe,EAAE,CAE7C;AAAA,QACeC,SAAQ,2CAevB;AAAA,yFAfA,wLAEyBb,SAAQ,CAACI,MAAM,CAAEO,eAAe,CAACG,MAAM,CAAC,QAAzDC,QAAQ,eAAmD;AACjER,OAAO,CAACQ,QAAQ,CAAC,CAAE;AAAA,oFAGf,YAAML,IAAI,GAAK,YAAY,2BAC9B;AACAM,OAAO,CAACC,IAAI,CAAC,SAAS,CAAC,CAAE;AAAA,qHAK3B,mDAGcC,SAAQ,oIAAvB,+LAEyBnB,SAAQ,CAACM,MAAM,CAAEM,eAAe,CAACG,MAAM,CAAC,QAAzDK,QAAQ,gBACdV,OAAO,CAACU,QAAQ,CAAC,CAAC,wFAEd,aAAMT,IAAI,GAAK,YAAY,4BAC9BM,OAAO,CAACC,IAAI,CAAC,SAAS,CAAC,CAAC,yHAK1B,2CAEDJ,QAAQ,EAAE,CAAE;AACZK,QAAQ,EAAE,CAAE;AAEZ,MAAO,kBAAMP,gBAAe,CAACS,KAAK,EAAE,GAAE;AACvC,CAAC,CAAE,CAAChB,MAAM,CAAEC,MAAM,CAAC,CAAC,CAEpB;AAAA,QACegB,aAAY,iDAS3B;AAAA,iGATA,kBAA4Bb,IAAI,gKAExBP,WAAU,CAACO,IAAI,CAAC,QACtBL,OAAO,CAACmB,IAAI,kBAAWlB,MAAM,EAAG,CAAC,0KAIlC,+CAGD,QAASmB,aAAY,EAAG,CACvBpB,OAAO,CAACmB,IAAI,kBAAWlB,MAAM,EAAG,CACjC,CACA;AACA,mBACC,oCACC,YAAK,aAAW,YAAY,uBAC3B,YAAI,SAAS,CAAC,YAAY,wBACzB,WAAI,SAAS,CAAC,iBAAiB,uBAC9B,MAAC,IAAI,EAAC,EAAE,CAAC,GAAG,wBACX,aAAM,SAAS,CAAC,YAAY,EAAQ,QACrC,GAAO,EACH,cACL,WAAI,SAAS,CAAC,iBAAiB,uBAC9B,KAAC,IAAI,EAAC,EAAE,kBAAYA,MAAM,CAAG,UAAEM,IAAI,EAAQ,EACvC,cACL,YACC,SAAS,CAAC,wBAAwB,CAClC,eAAa,MAAM,WACnB,YACU,CAACL,MAAM,GACb,GACD,EACA,cACN,sBAAKK,IAAI,CAAC,YAAU,GAAK,cACzB,KAAC,QAAQ,EACR,YAAY,CAAEW,YAAa,CAC3B,YAAY,CAAEE,YAAa,CAC3B,IAAI,CAAEf,IAAK,EACV,GACG,CAEP;AACD,CACA;AAEA;AACA,cAAeN,SAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}