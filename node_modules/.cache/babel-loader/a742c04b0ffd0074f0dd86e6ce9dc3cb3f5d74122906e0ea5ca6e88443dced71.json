{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/bount/Documents/GitHub/Thinkful-Flashcard-App/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/bount/Documents/GitHub/Thinkful-Flashcard-App/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/Users/bount/Documents/GitHub/Thinkful-Flashcard-App/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";//--------------------------IMPORTS--------------------------------\nimport React,{useState,useEffect}from\"react\";import{Link,useHistory,useParams}from\"react-router-dom\";import CardForm from\"./CardForm\";import{createCard,readDeck}from\"../../utils/api/index\";import\"./AddCard.css\";// --------------------------END IMPORTS----------------------------\n//---------------------------FUNCTIONS------------------------------\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function AddCard(){// assigning variables to useHistory and useParams and setting state for deck\nvar history=useHistory();var _useParams=useParams(),deckId=_useParams.deckId;var _useState=useState({}),_useState2=_slicedToArray(_useState,2),deck=_useState2[0],setDeck=_useState2[1];useEffect(function(){// abort controller to prevent memory leaks\nvar abortController=new AbortController();// async function to load deck\nfunction loadDeck(){return _loadDeck.apply(this,arguments);}// calling loadDeck function\nfunction _loadDeck(){_loadDeck=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var deckInfo;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return readDeck(deckId,abortController.signal);case 3:deckInfo=_context.sent;// setting deck to deckInfo\nsetDeck(deckInfo);_context.next=14;break;case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);if(!(_context.t0.name===\"AbortError\")){_context.next=13;break;}console.info(\"aborted\");// else throw error to console\n_context.next=14;break;case 13:throw _context.t0;case 14:case\"end\":return _context.stop();}}},_callee,null,[[0,7]]);}));return _loadDeck.apply(this,arguments);}loadDeck();// return abort controller to prevent memory leaks\nreturn function(){return abortController.abort();};// deckId is dependency array to prevent infinite loop\n},[deckId]);//Creates a new card\nfunction handleSubmit(_x){return _handleSubmit.apply(this,arguments);}//if cancel button is clicked, redirect to deck page\nfunction _handleSubmit(){_handleSubmit=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(card){return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return createCard(deckId,card);case 3:showCardSuccessToast();// catch error and throw error to console\n_context2.next=9;break;case 6:_context2.prev=6;_context2.t0=_context2[\"catch\"](0);throw _context2.t0;case 9:case\"end\":return _context2.stop();}}},_callee2,null,[[0,6]]);}));return _handleSubmit.apply(this,arguments);}function handleCancel(){history.push(\"/decks/\".concat(deckId));}//function to display toast message when card is created successfully\nfunction showCardSuccessToast(){var toast=document.querySelector(\".card-toast\");toast.classList.add(\"show\");// after 2.5 seconds, remove show class from toast\nsetTimeout(function(){return toast.classList.remove(\"show\");},2500);}// --------------------------END FUNCTIONS AND HANDLERS------------------\n// --------------------------RETURN STATEMENT----------------------------\n// the return statement renders the breadcrumb navigation, the deck name, the card form, and the toast message\n// the toast message is hidden by default and is displayed when the card is created successfully\n// the below code contains the HTML for the breadcrumb navigation, the deck name, the card form, and the toast message that is displayed when the card is created successfully\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"nav\",{\"aria-label\":\"breadcrumb\",children:/*#__PURE__*/_jsxs(\"ol\",{className:\"breadcrumb\",children:[/*#__PURE__*/_jsx(\"li\",{className:\"breadcrumb-item\",children:/*#__PURE__*/_jsxs(Link,{to:\"/\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"bi bi-house-door-fill\"}),\" Home\"]})}),/*#__PURE__*/_jsx(\"li\",{className:\"breadcrumb-item\",children:/*#__PURE__*/_jsx(Link,{to:\"/decks/\".concat(deckId),children:deck.name})}),/*#__PURE__*/_jsx(\"li\",{className:\"breadcrumb-item active\",\"aria-current\":\"page\",children:\"Add Card\"})]})}),/*#__PURE__*/_jsxs(\"h1\",{children:[deck.name,\": Add Card\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"card-toast alert alert-success hidden\",children:\"Card Added!\"}),/*#__PURE__*/_jsx(CardForm,{handleSubmit:handleSubmit,handleCancel:handleCancel})]});// -----------------------------END RETURN STATEMENT-------------------------------\n// --------------------------------END FUNCTION------------------------------------\n}// export AddCard function\nexport default AddCard;","map":{"version":3,"names":["React","useState","useEffect","Link","useHistory","useParams","CardForm","createCard","readDeck","AddCard","history","deckId","deck","setDeck","abortController","AbortController","loadDeck","signal","deckInfo","name","console","info","abort","handleSubmit","card","showCardSuccessToast","handleCancel","push","toast","document","querySelector","classList","add","setTimeout","remove"],"sources":["C:/Users/bount/Documents/GitHub/Thinkful-Flashcard-App/src/Layout/Cards/AddCard.js"],"sourcesContent":["//--------------------------IMPORTS--------------------------------\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport CardForm from \"./CardForm\";\r\nimport { createCard, readDeck } from \"../../utils/api/index\";\r\nimport \"./AddCard.css\";\r\n\r\n// --------------------------END IMPORTS----------------------------\r\n\r\n//---------------------------FUNCTIONS------------------------------\r\n\r\nfunction AddCard() {\r\n\t// assigning variables to useHistory and useParams and setting state for deck\r\n\tconst history = useHistory();\r\n\tconst { deckId } = useParams();\r\n\tconst [deck, setDeck] = useState({});\r\n\r\n\tuseEffect(() => {\r\n\t\t// abort controller to prevent memory leaks\r\n\t\tconst abortController = new AbortController();\r\n\t\t// async function to load deck\r\n\t\tasync function loadDeck() {\r\n\t\t\t// try catch to load deck\r\n\t\t\ttry {\r\n\t\t\t\t// assigning deckInfo to readDeck function\r\n\t\t\t\tconst deckInfo = await readDeck(deckId, abortController.signal);\r\n\t\t\t\t// setting deck to deckInfo\r\n\t\t\t\tsetDeck(deckInfo);\r\n\t\t\t} catch (error) {\r\n\t\t\t\t// if error is abort error, console log aborted\r\n\t\t\t\tif (error.name === \"AbortError\") {\r\n\t\t\t\t\tconsole.info(\"aborted\");\r\n\t\t\t\t\t// else throw error to console\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow error;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// calling loadDeck function\r\n\t\tloadDeck();\r\n\t\t// return abort controller to prevent memory leaks\r\n\t\treturn () => abortController.abort();\r\n\t\t// deckId is dependency array to prevent infinite loop\r\n\t}, [deckId]);\r\n\r\n\t//Creates a new card\r\n\tasync function handleSubmit(card) {\r\n\t\t// try catch to create card\r\n\t\ttry {\r\n\t\t\t// assigning cardInfo to createCard function\r\n\t\t\t// createCard function takes in deckId and card and calls showCardSuccessToast function after card is created successfully\r\n\t\t\tawait createCard(deckId, card);\r\n\t\t\tshowCardSuccessToast();\r\n\t\t\t// catch error and throw error to console\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\t//if cancel button is clicked, redirect to deck page\r\n\tfunction handleCancel() {\r\n\t\thistory.push(`/decks/${deckId}`);\r\n\t}\r\n\t//function to display toast message when card is created successfully\r\n\tfunction showCardSuccessToast() {\r\n\t\tconst toast = document.querySelector(\".card-toast\");\r\n\t\ttoast.classList.add(\"show\");\r\n\t\t// after 2.5 seconds, remove show class from toast\r\n\t\tsetTimeout(() => toast.classList.remove(\"show\"), 2500);\r\n\t}\r\n\t// --------------------------END FUNCTIONS AND HANDLERS------------------\r\n\r\n\t// --------------------------RETURN STATEMENT----------------------------\r\n\r\n\t// the return statement renders the breadcrumb navigation, the deck name, the card form, and the toast message\r\n\t// the toast message is hidden by default and is displayed when the card is created successfully\r\n\t// the below code contains the HTML for the breadcrumb navigation, the deck name, the card form, and the toast message that is displayed when the card is created successfully\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<nav aria-label=\"breadcrumb\">\r\n\t\t\t\t<ol className=\"breadcrumb\">\r\n\t\t\t\t\t<li className=\"breadcrumb-item\">\r\n\t\t\t\t\t\t<Link to=\"/\">\r\n\t\t\t\t\t\t\t<i className=\"bi bi-house-door-fill\"></i> Home\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"breadcrumb-item\">\r\n\t\t\t\t\t\t<Link to={`/decks/${deckId}`}>{deck.name}</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li\r\n\t\t\t\t\t\tclassName=\"breadcrumb-item active\"\r\n\t\t\t\t\t\taria-current=\"page\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tAdd Card\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ol>\r\n\t\t\t</nav>\r\n\t\t\t<h1>{deck.name}: Add Card</h1>\r\n\t\t\t<div className=\"card-toast alert alert-success hidden\">Card Added!</div>\r\n\r\n\t\t\t<CardForm\r\n\t\t\t\thandleSubmit={handleSubmit}\r\n\t\t\t\thandleCancel={handleCancel}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n\t// -----------------------------END RETURN STATEMENT-------------------------------\r\n\r\n\t// --------------------------------END FUNCTION------------------------------------\r\n}\r\n\r\n// export AddCard function\r\nexport default AddCard;\r\n"],"mappings":"obAAA;AAEA,MAAOA,MAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,IAAI,CAAEC,UAAU,CAAEC,SAAS,KAAQ,kBAAkB,CAC9D,MAAOC,SAAQ,KAAM,YAAY,CACjC,OAASC,UAAU,CAAEC,QAAQ,KAAQ,uBAAuB,CAC5D,MAAO,eAAe,CAEtB;AAEA;AAAA,wFAEA,QAASC,QAAO,EAAG,CAClB;AACA,GAAMC,QAAO,CAAGN,UAAU,EAAE,CAC5B,eAAmBC,SAAS,EAAE,CAAtBM,MAAM,YAANA,MAAM,CACd,cAAwBV,QAAQ,CAAC,CAAC,CAAC,CAAC,wCAA7BW,IAAI,eAAEC,OAAO,eAEpBX,SAAS,CAAC,UAAM,CACf;AACA,GAAMY,gBAAe,CAAG,GAAIC,gBAAe,EAAE,CAC7C;AAAA,QACeC,SAAQ,2CAiBvB;AAAA,yFAjBA,wLAIyBR,SAAQ,CAACG,MAAM,CAAEG,eAAe,CAACG,MAAM,CAAC,QAAzDC,QAAQ,eACd;AACAL,OAAO,CAACK,QAAQ,CAAC,CAAC,oFAGd,YAAMC,IAAI,GAAK,YAAY,2BAC9BC,OAAO,CAACC,IAAI,CAAC,SAAS,CAAC,CACvB;AAAA,qHAKF,2CAEDL,QAAQ,EAAE,CACV;AACA,MAAO,kBAAMF,gBAAe,CAACQ,KAAK,EAAE,GACpC;AACD,CAAC,CAAE,CAACX,MAAM,CAAC,CAAC,CAEZ;AAAA,QACeY,aAAY,iDAa3B;AAAA,iGAbA,kBAA4BC,IAAI,gKAKxBjB,WAAU,CAACI,MAAM,CAAEa,IAAI,CAAC,QAC9BC,oBAAoB,EAAE,CACtB;AAAA,0KAID,+CAGD,QAASC,aAAY,EAAG,CACvBhB,OAAO,CAACiB,IAAI,kBAAWhB,MAAM,EAAG,CACjC,CACA;AACA,QAASc,qBAAoB,EAAG,CAC/B,GAAMG,MAAK,CAAGC,QAAQ,CAACC,aAAa,CAAC,aAAa,CAAC,CACnDF,KAAK,CAACG,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC,CAC3B;AACAC,UAAU,CAAC,iBAAML,MAAK,CAACG,SAAS,CAACG,MAAM,CAAC,MAAM,CAAC,GAAE,IAAI,CAAC,CACvD,CACA;AAEA;AAEA;AACA;AACA;AACA,mBACC,oCACC,YAAK,aAAW,YAAY,uBAC3B,YAAI,SAAS,CAAC,YAAY,wBACzB,WAAI,SAAS,CAAC,iBAAiB,uBAC9B,MAAC,IAAI,EAAC,EAAE,CAAC,GAAG,wBACX,UAAG,SAAS,CAAC,uBAAuB,EAAK,QAC1C,GAAO,EACH,cACL,WAAI,SAAS,CAAC,iBAAiB,uBAC9B,KAAC,IAAI,EAAC,EAAE,kBAAYvB,MAAM,CAAG,UAAEC,IAAI,CAACO,IAAI,EAAQ,EAC5C,cACL,WACC,SAAS,CAAC,wBAAwB,CAClC,eAAa,MAAM,UACnB,UAED,EAAK,GACD,EACA,cACN,sBAAKP,IAAI,CAACO,IAAI,CAAC,YAAU,GAAK,cAC9B,YAAK,SAAS,CAAC,uCAAuC,UAAC,aAAW,EAAM,cAExE,KAAC,QAAQ,EACR,YAAY,CAAEI,YAAa,CAC3B,YAAY,CAAEG,YAAa,EAC1B,GACG,CAEP;AAEA;AACD,CAEA;AACA,cAAejB,QAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}