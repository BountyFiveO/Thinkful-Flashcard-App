{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bount\\\\Documents\\\\GitHub\\\\Thinkful-Flashcard-App\\\\src\\\\Layout\\\\Decks\\\\EditDeck.js\",\n  _s = $RefreshSig$();\n//-------------------START IMPORTS---------------------------\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport DeckForm from \"./DeckForm\";\nimport { readDeck, updateDeck } from \"../../utils/api/index\";\n//-------------------END IMPORTS---------------------------\n\n//-------------------START FUNCTION EDITDECK---------------------------\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EditDeck() {\n  _s();\n  const history = useHistory();\n  const {\n    deckId\n  } = useParams();\n  const [deck, setDeck] = useState({});\n  const name = deck.name ? deck.name : \"Deck Name\"; // if name is equal to deck.name, then return deck.name, if not, then return \"Deck Name\"\n\n  useEffect(() => {\n    //One useEffect for both loading the deck and the card as they are connected and should both be aborted when leaving this Component\n    const abortController = new AbortController(); //assign a variable abortController to the result of AbortController\n\n    async function loadDeck() {\n      //Load the deck for navbar information\n      try {\n        //try to load the deck\n        const deckInfo = await readDeck(deckId, abortController.signal); //await the result of readDeck and assign it to deckInfo\n        setDeck(deckInfo); //set the value of deck to deckInfo\n      } catch (error) {\n        //if error is thrown, then the error will be caught and the error will be thrown\n        if (error.name === \"AbortError\") {\n          //if the error name is equal to AbortError, then the console will log aborted\n          console.info(\"aborted\");\n        } else {\n          //if the error name is not equal to AbortError, then the error will be thrown\n          throw error;\n        }\n      }\n    }\n    loadDeck(); //call the loadDeck function\n\n    return () => abortController.abort();\n  }, [deckId]);\n  function handleSubmit(deck) {\n    //handleSubmit function that takes in deck as a parameter\n    const abortController = new AbortController(); //assign a variable abortController to the result of AbortController\n    // create an async function called editDeck that will be called when the handleSubmit function is called\n    async function editDeck() {\n      try {\n        const deckInfo = await updateDeck(deck, abortController.signal); //await the result of updateDeck and assign it to deckInfo\n        history.push(`/decks/${deckInfo.id}`);\n      } catch (err) {\n        if (err.name === \"AbortError\") {\n          //if the error name is equal to AbortError, then the console will log aborted\n          console.info(\"aborted\");\n        } else {\n          throw err; //if the error name is not equal to AbortError, then the error will be thrown\n        }\n      }\n    }\n\n    editDeck(); //call the editDeck function\n\n    return () => {\n      //return the abortController.abort function\n      abortController.abort(); //abort the controller\n    };\n  }\n\n  function handleCancel() {\n    //handleCancel function that will be called when the cancel button is clicked\n    history.push(`/decks/${deckId}`); //push the user to the deck page\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      \"aria-label\": \"breadcrumb\",\n      children: /*#__PURE__*/_jsxDEV(\"ol\", {\n        className: \"breadcrumb\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"breadcrumb-item\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"oi oi-home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 8\n            }, this), \" Home\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"breadcrumb-item\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: `/decks/${deckId}`,\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"breadcrumb-item active\",\n          \"aria-current\": \"page\",\n          children: \"Edit Deck\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Edit Deck\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(DeckForm, {\n      handleSubmit: handleSubmit,\n      handleCancel: handleCancel,\n      deck: deck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 3\n  }, this);\n  // -------------------END RETURN---------------------------\n}\n//-------------------END FUNCTION EDITDECK---------------------------\n\n//--------------EXPORT-----------------\n_s(EditDeck, \"LFcHeghtlO2n685iTCKp37HNk7k=\", false, function () {\n  return [useHistory, useParams];\n});\n_c = EditDeck;\nexport default EditDeck;\nvar _c;\n$RefreshReg$(_c, \"EditDeck\");","map":{"version":3,"names":["React","useEffect","useState","Link","useHistory","useParams","DeckForm","readDeck","updateDeck","EditDeck","history","deckId","deck","setDeck","name","abortController","AbortController","loadDeck","deckInfo","signal","error","console","info","abort","handleSubmit","editDeck","push","id","err","handleCancel"],"sources":["C:/Users/bount/Documents/GitHub/Thinkful-Flashcard-App/src/Layout/Decks/EditDeck.js"],"sourcesContent":["//-------------------START IMPORTS---------------------------\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport DeckForm from \"./DeckForm\";\r\nimport { readDeck, updateDeck } from \"../../utils/api/index\";\r\n//-------------------END IMPORTS---------------------------\r\n\r\n//-------------------START FUNCTION EDITDECK---------------------------\r\nfunction EditDeck() {\r\n\tconst history = useHistory();\r\n\tconst { deckId } = useParams();\r\n\tconst [deck, setDeck] = useState({});\r\n\r\n\tconst name = deck.name ? deck.name : \"Deck Name\"; // if name is equal to deck.name, then return deck.name, if not, then return \"Deck Name\"\r\n\r\n\tuseEffect(() => {\r\n\t\t//One useEffect for both loading the deck and the card as they are connected and should both be aborted when leaving this Component\r\n\t\tconst abortController = new AbortController(); //assign a variable abortController to the result of AbortController\r\n\r\n\t\tasync function loadDeck() {\r\n\t\t\t//Load the deck for navbar information\r\n\t\t\ttry {\r\n\t\t\t\t//try to load the deck\r\n\t\t\t\tconst deckInfo = await readDeck(deckId, abortController.signal); //await the result of readDeck and assign it to deckInfo\r\n\t\t\t\tsetDeck(deckInfo); //set the value of deck to deckInfo\r\n\t\t\t} catch (error) {\r\n\t\t\t\t//if error is thrown, then the error will be caught and the error will be thrown\r\n\t\t\t\tif (error.name === \"AbortError\") {\r\n\t\t\t\t\t//if the error name is equal to AbortError, then the console will log aborted\r\n\t\t\t\t\tconsole.info(\"aborted\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//if the error name is not equal to AbortError, then the error will be thrown\r\n\t\t\t\t\tthrow error;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tloadDeck(); //call the loadDeck function\r\n\r\n\t\treturn () => abortController.abort();\r\n\t}, [deckId]);\r\n\r\n\tfunction handleSubmit(deck) {\r\n\t\t//handleSubmit function that takes in deck as a parameter\r\n\t\tconst abortController = new AbortController(); //assign a variable abortController to the result of AbortController\r\n\t\t// create an async function called editDeck that will be called when the handleSubmit function is called\r\n\t\tasync function editDeck() {\r\n\t\t\ttry {\r\n\t\t\t\tconst deckInfo = await updateDeck(deck, abortController.signal); //await the result of updateDeck and assign it to deckInfo\r\n\t\t\t\thistory.push(`/decks/${deckInfo.id}`);\r\n\t\t\t} catch (err) {\r\n\t\t\t\tif (err.name === \"AbortError\") {\r\n\t\t\t\t\t//if the error name is equal to AbortError, then the console will log aborted\r\n\t\t\t\t\tconsole.info(\"aborted\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow err; //if the error name is not equal to AbortError, then the error will be thrown\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\teditDeck(); //call the editDeck function\r\n\r\n\t\treturn () => {\r\n\t\t\t//return the abortController.abort function\r\n\t\t\tabortController.abort(); //abort the controller\r\n\t\t};\r\n\t}\r\n\tfunction handleCancel() {\r\n\t\t//handleCancel function that will be called when the cancel button is clicked\r\n\t\thistory.push(`/decks/${deckId}`); //push the user to the deck page\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{/* These html elements and classes are the same as the other files.. comments for code is the same */}\r\n\t\t\t<nav aria-label=\"breadcrumb\">\r\n\t\t\t\t<ol className=\"breadcrumb\">\r\n\t\t\t\t\t<li className=\"breadcrumb-item\">\r\n\t\t\t\t\t\t<Link to=\"/\">\r\n\t\t\t\t\t\t\t<span className=\"oi oi-home\"></span> Home\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"breadcrumb-item\">\r\n\t\t\t\t\t\t<Link to={`/decks/${deckId}`}>{name}</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li\r\n\t\t\t\t\t\tclassName=\"breadcrumb-item active\"\r\n\t\t\t\t\t\taria-current=\"page\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tEdit Deck\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ol>\r\n\t\t\t</nav>\r\n\t\t\t<h1>Edit Deck</h1>\r\n\t\t\t<DeckForm\r\n\t\t\t\thandleSubmit={handleSubmit}\r\n\t\t\t\thandleCancel={handleCancel}\r\n\t\t\t\tdeck={deck}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n\t// -------------------END RETURN---------------------------\r\n}\r\n//-------------------END FUNCTION EDITDECK---------------------------\r\n\r\n//--------------EXPORT-----------------\r\nexport default EditDeck;\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,EAAEC,UAAU,EAAEC,SAAS,QAAQ,kBAAkB;AAC9D,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAASC,QAAQ,EAAEC,UAAU,QAAQ,uBAAuB;AAC5D;;AAEA;AAAA;AACA,SAASC,QAAQ,GAAG;EAAA;EACnB,MAAMC,OAAO,GAAGN,UAAU,EAAE;EAC5B,MAAM;IAAEO;EAAO,CAAC,GAAGN,SAAS,EAAE;EAC9B,MAAM,CAACO,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEpC,MAAMY,IAAI,GAAGF,IAAI,CAACE,IAAI,GAAGF,IAAI,CAACE,IAAI,GAAG,WAAW,CAAC,CAAC;;EAElDb,SAAS,CAAC,MAAM;IACf;IACA,MAAMc,eAAe,GAAG,IAAIC,eAAe,EAAE,CAAC,CAAC;;IAE/C,eAAeC,QAAQ,GAAG;MACzB;MACA,IAAI;QACH;QACA,MAAMC,QAAQ,GAAG,MAAMX,QAAQ,CAACI,MAAM,EAAEI,eAAe,CAACI,MAAM,CAAC,CAAC,CAAC;QACjEN,OAAO,CAACK,QAAQ,CAAC,CAAC,CAAC;MACpB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACf;QACA,IAAIA,KAAK,CAACN,IAAI,KAAK,YAAY,EAAE;UAChC;UACAO,OAAO,CAACC,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC,MAAM;UACN;UACA,MAAMF,KAAK;QACZ;MACD;IACD;IAEAH,QAAQ,EAAE,CAAC,CAAC;;IAEZ,OAAO,MAAMF,eAAe,CAACQ,KAAK,EAAE;EACrC,CAAC,EAAE,CAACZ,MAAM,CAAC,CAAC;EAEZ,SAASa,YAAY,CAACZ,IAAI,EAAE;IAC3B;IACA,MAAMG,eAAe,GAAG,IAAIC,eAAe,EAAE,CAAC,CAAC;IAC/C;IACA,eAAeS,QAAQ,GAAG;MACzB,IAAI;QACH,MAAMP,QAAQ,GAAG,MAAMV,UAAU,CAACI,IAAI,EAAEG,eAAe,CAACI,MAAM,CAAC,CAAC,CAAC;QACjET,OAAO,CAACgB,IAAI,CAAE,UAASR,QAAQ,CAACS,EAAG,EAAC,CAAC;MACtC,CAAC,CAAC,OAAOC,GAAG,EAAE;QACb,IAAIA,GAAG,CAACd,IAAI,KAAK,YAAY,EAAE;UAC9B;UACAO,OAAO,CAACC,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC,MAAM;UACN,MAAMM,GAAG,CAAC,CAAC;QACZ;MACD;IACD;;IACAH,QAAQ,EAAE,CAAC,CAAC;;IAEZ,OAAO,MAAM;MACZ;MACAV,eAAe,CAACQ,KAAK,EAAE,CAAC,CAAC;IAC1B,CAAC;EACF;;EACA,SAASM,YAAY,GAAG;IACvB;IACAnB,OAAO,CAACgB,IAAI,CAAE,UAASf,MAAO,EAAC,CAAC,CAAC,CAAC;EACnC;;EAEA,oBACC;IAAA,wBAEC;MAAK,cAAW,YAAY;MAAA,uBAC3B;QAAI,SAAS,EAAC,YAAY;QAAA,wBACzB;UAAI,SAAS,EAAC,iBAAiB;UAAA,uBAC9B,QAAC,IAAI;YAAC,EAAE,EAAC,GAAG;YAAA,wBACX;cAAM,SAAS,EAAC;YAAY;cAAA;cAAA;cAAA;YAAA,QAAQ,SACrC;UAAA;YAAA;YAAA;YAAA;UAAA;QAAO;UAAA;UAAA;UAAA;QAAA,QACH,eACL;UAAI,SAAS,EAAC,iBAAiB;UAAA,uBAC9B,QAAC,IAAI;YAAC,EAAE,EAAG,UAASA,MAAO,EAAE;YAAA,UAAEG;UAAI;YAAA;YAAA;YAAA;UAAA;QAAQ;UAAA;UAAA;UAAA;QAAA,QACvC,eACL;UACC,SAAS,EAAC,wBAAwB;UAClC,gBAAa,MAAM;UAAA,UACnB;QAED;UAAA;UAAA;UAAA;QAAA,QAAK;MAAA;QAAA;QAAA;QAAA;MAAA;IACD;MAAA;MAAA;MAAA;IAAA,QACA,eACN;MAAA,UAAI;IAAS;MAAA;MAAA;MAAA;IAAA,QAAK,eAClB,QAAC,QAAQ;MACR,YAAY,EAAEU,YAAa;MAC3B,YAAY,EAAEK,YAAa;MAC3B,IAAI,EAAEjB;IAAK;MAAA;MAAA;MAAA;IAAA,QACV;EAAA;IAAA;IAAA;IAAA;EAAA,QACG;EAEP;AACD;AACA;;AAEA;AAAA,GAhGSH,QAAQ;EAAA,QACAL,UAAU,EACPC,SAAS;AAAA;AAAA,KAFpBI,QAAQ;AAiGjB,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}