{"ast":null,"code":"import _objectSpread from\"C:/Users/bount/Documents/GitHub/Thinkful-Flashcard-App/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _regeneratorRuntime from\"C:/Users/bount/Documents/GitHub/Thinkful-Flashcard-App/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/bount/Documents/GitHub/Thinkful-Flashcard-App/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/Users/bount/Documents/GitHub/Thinkful-Flashcard-App/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";//-------------------START IMPORTS-----------------\nimport React,{useEffect,useState}from\"react\";import{Link}from\"react-router-dom\";import DeckInfoCard from\"./home/DeckInfoCard\";import{listDecks,deleteDeck}from\"./utils/api/index\";import StructureInfoCard from\"./home/DeckInfoCardStructure\";import\"./style.css\";//-------------------END IMPORTS-----------------\n//-------------------START FUNCTION HOME-----------------\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Home(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),decks=_useState2[0],setDecks=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),loaded=_useState4[0],setLoaded=_useState4[1];//Loads deck information. Triggers a re-render when they are loaded\nuseEffect(function(){setDecks([]);var abortController=new AbortController();//assign a variable abortController to the result of AbortController\nfunction loadDecks(){return _loadDecks.apply(this,arguments);}function _loadDecks(){_loadDecks=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var _decks;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return listDecks(abortController.signal);case 3:_decks=_context.sent;//await the result of listDecks and assign it to _decks\nsetDecks(_decks);setLoaded(true);_context.next=15;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);if(!(_context.t0.name===\"AbortError\")){_context.next=14;break;}//if the error name is equal to AbortError, then console.log aborted\nconsole.info(\"Aborted\");_context.next=15;break;case 14:throw _context.t0;case 15:case\"end\":return _context.stop();}}},_callee,null,[[0,8]]);}));return _loadDecks.apply(this,arguments);}loadDecks();//call the loadDecks function\nreturn function(){//return a function that will abort the controller\nconsole.info(\"aborting\");abortController.abort();};},[]);function handleDeleteDeck(_x){return _handleDeleteDeck.apply(this,arguments);}//use the map function to create a new array of deck info cards from the decks array and pass the handleDeleteDeck function as a prop\nfunction _handleDeleteDeck(){_handleDeleteDeck=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(id){return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!//if the window.confirm returns true, then the deleteDeck function will be called with the id as a parameter\nwindow.confirm(\"Delete this deck?\\n\\nYou will not be able to recover it.\")){_context2.next=4;break;}_context2.next=3;return deleteDeck(id);case 3://await the result of deleteDeck and assign it to _decks\nsetDecks(function(){return decks.filter(function(deck){return deck.id!==id;});});//set the decks state to the result of the filter function\ncase 4:case\"end\":return _context2.stop();}}},_callee2);}));return _handleDeleteDeck.apply(this,arguments);}var rows=decks.map(function(deck){return DeckInfoCard(_objectSpread(_objectSpread({},deck),{},{handleDeleteDeck:handleDeleteDeck}));});//Before loading, add skeleton deck info cards\nif(!loaded){for(var i=0;i<3;i++){//for loop that will run 3 times\nrows.push(/*#__PURE__*/_jsx(StructureInfoCard,{},i+10));//push a skeleton deck info card to the rows array\n}}//--------------------START RETURN-----------------\nreturn/*#__PURE__*/ (//return the following JS\n_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsxs(Link,{to:\"/decks/new\",className:\"btn btn-secondary\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"bi bi-plus-lg\"}),\" Create Deck\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"row my-4\",children:rows})]}));//-------------------END RETURN-----------------\n}//-------------------END FUNCTION HOME-----------------\n//-------------------EXPORT HOME-----------------\nexport default Home;","map":{"version":3,"names":["React","useEffect","useState","Link","DeckInfoCard","listDecks","deleteDeck","StructureInfoCard","Home","decks","setDecks","loaded","setLoaded","abortController","AbortController","loadDecks","signal","_decks","name","console","info","abort","handleDeleteDeck","id","window","confirm","filter","deck","rows","map","i","push"],"sources":["C:/Users/bount/Documents/GitHub/Thinkful-Flashcard-App/src/Home.js"],"sourcesContent":["//-------------------START IMPORTS-----------------\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport DeckInfoCard from \"./home/DeckInfoCard\";\r\nimport { listDecks, deleteDeck } from \"./utils/api/index\";\r\nimport StructureInfoCard from \"./home/DeckInfoCardStructure\";\r\nimport \"./style.css\";\r\n//-------------------END IMPORTS-----------------\r\n\r\n//-------------------START FUNCTION HOME-----------------\r\nfunction Home() {\r\n\tconst [decks, setDecks] = useState([]);\r\n\tconst [loaded, setLoaded] = useState(false);\r\n\r\n\t//Loads deck information. Triggers a re-render when they are loaded\r\n\tuseEffect(() => {\r\n\t\tsetDecks([]);\r\n\t\tconst abortController = new AbortController(); //assign a variable abortController to the result of AbortController\r\n\r\n\t\tasync function loadDecks() {\r\n\t\t\t//create an async function called loadDecks that will be called when the useEffect function is called\r\n\t\t\ttry {\r\n\t\t\t\tlet _decks = await listDecks(abortController.signal); //await the result of listDecks and assign it to _decks\r\n\t\t\t\tsetDecks(_decks);\r\n\t\t\t\tsetLoaded(true);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tif (error.name === \"AbortError\") {\r\n\t\t\t\t\t//if the error name is equal to AbortError, then console.log aborted\r\n\t\t\t\t\tconsole.info(\"Aborted\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//if the error name is not equal to AbortError, then the error will be thrown\r\n\t\t\t\t\tthrow error;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tloadDecks(); //call the loadDecks function\r\n\t\treturn () => {\r\n\t\t\t//return a function that will abort the controller\r\n\t\t\tconsole.info(\"aborting\");\r\n\t\t\tabortController.abort();\r\n\t\t};\r\n\t}, []);\r\n\r\n\tasync function handleDeleteDeck(id) {\r\n\t\t//create a function called handleDeleteDeck that takes in an id as a parameter\r\n\t\tif (\r\n\t\t\t//if the window.confirm returns true, then the deleteDeck function will be called with the id as a parameter\r\n\t\t\twindow.confirm(\"Delete this deck?\\n\\nYou will not be able to recover it.\")\r\n\t\t) {\r\n\t\t\tawait deleteDeck(id); //await the result of deleteDeck and assign it to _decks\r\n\t\t\tsetDecks(() => decks.filter((deck) => deck.id !== id)); //set the decks state to the result of the filter function\r\n\t\t}\r\n\t}\r\n\r\n\t//use the map function to create a new array of deck info cards from the decks array and pass the handleDeleteDeck function as a prop\r\n\tconst rows = decks.map((deck) => DeckInfoCard({ ...deck, handleDeleteDeck }));\r\n\r\n\t//Before loading, add skeleton deck info cards\r\n\tif (!loaded) {\r\n\t\tfor (let i = 0; i < 3; i++) {\r\n\t\t\t//for loop that will run 3 times\r\n\t\t\trows.push(<StructureInfoCard key={i + 10} />); //push a skeleton deck info card to the rows array\r\n\t\t}\r\n\t}\r\n\t//--------------------START RETURN-----------------\r\n\treturn (\r\n\t\t//return the following JS\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<Link\r\n\t\t\t\t\tto=\"/decks/new\"\r\n\t\t\t\t\tclassName=\"btn btn-secondary\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<i className=\"bi bi-plus-lg\"></i> Create Deck\r\n\t\t\t\t</Link>\r\n\t\t\t\r\n\t\t\t<div className=\"row my-4\">{rows}</div>\r\n\t\t\t</div>\r\n\t\r\n\t);\r\n\t//-------------------END RETURN-----------------\r\n}\r\n//-------------------END FUNCTION HOME-----------------\r\n\r\n//-------------------EXPORT HOME-----------------\r\nexport default Home;\r\n"],"mappings":"+jBAAA;AAEA,MAAOA,MAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,OAASC,IAAI,KAAQ,kBAAkB,CACvC,MAAOC,aAAY,KAAM,qBAAqB,CAC9C,OAASC,SAAS,CAAEC,UAAU,KAAQ,mBAAmB,CACzD,MAAOC,kBAAiB,KAAM,8BAA8B,CAC5D,MAAO,aAAa,CACpB;AAEA;AAAA,wFACA,QAASC,KAAI,EAAG,CACf,cAA0BN,QAAQ,CAAC,EAAE,CAAC,wCAA/BO,KAAK,eAAEC,QAAQ,eACtB,eAA4BR,QAAQ,CAAC,KAAK,CAAC,yCAApCS,MAAM,eAAEC,SAAS,eAExB;AACAX,SAAS,CAAC,UAAM,CACfS,QAAQ,CAAC,EAAE,CAAC,CACZ,GAAMG,gBAAe,CAAG,GAAIC,gBAAe,EAAE,CAAE;AAAA,QAEhCC,UAAS,uIAAxB,sLAGqBV,UAAS,CAACQ,eAAe,CAACG,MAAM,CAAC,QAAhDC,MAAM,eAA4C;AACtDP,QAAQ,CAACO,MAAM,CAAC,CAChBL,SAAS,CAAC,IAAI,CAAC,CAAC,oFAEZ,YAAMM,IAAI,GAAK,YAAY,2BAC9B;AACAC,OAAO,CAACC,IAAI,CAAC,SAAS,CAAC,CAAC,qHAM1B,4CACDL,SAAS,EAAE,CAAE;AACb,MAAO,WAAM,CACZ;AACAI,OAAO,CAACC,IAAI,CAAC,UAAU,CAAC,CACxBP,eAAe,CAACQ,KAAK,EAAE,CACxB,CAAC,CACF,CAAC,CAAE,EAAE,CAAC,CAAC,QAEQC,iBAAgB,qDAW/B;AAAA,yGAXA,kBAAgCC,EAAE,4HAGhC;AACAC,MAAM,CAACC,OAAO,CAAC,0DAA0D,CAAC,iDAEpEnB,WAAU,CAACiB,EAAE,CAAC,QAAE;AACtBb,QAAQ,CAAC,iBAAMD,MAAK,CAACiB,MAAM,CAAC,SAACC,IAAI,QAAKA,KAAI,CAACJ,EAAE,GAAKA,EAAE,GAAC,GAAC,CAAE;AAAA,wDAEzD,mDAGD,GAAMK,KAAI,CAAGnB,KAAK,CAACoB,GAAG,CAAC,SAACF,IAAI,QAAKvB,aAAY,gCAAMuB,IAAI,MAAEL,gBAAgB,CAAhBA,gBAAgB,GAAG,GAAC,CAE7E;AACA,GAAI,CAACX,MAAM,CAAE,CACZ,IAAK,GAAImB,EAAC,CAAG,CAAC,CAAEA,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAE,CAAE,CAC3B;AACAF,IAAI,CAACG,IAAI,cAAC,KAAC,iBAAiB,IAAMD,CAAC,CAAG,EAAE,CAAI,CAAC,CAAE;AAChD,CACD,CACA;AACA,oBACC;AACC,aAAK,SAAS,CAAC,KAAK,wBACnB,MAAC,IAAI,EACJ,EAAE,CAAC,YAAY,CACf,SAAS,CAAC,mBAAmB,wBAE7B,UAAG,SAAS,CAAC,eAAe,EAAK,eAClC,GAAO,cAER,YAAK,SAAS,CAAC,UAAU,UAAEF,IAAI,EAAO,GAChC,EAGR;AACD,CACA;AAEA;AACA,cAAepB,KAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}