{"ast":null,"code":"import _slicedToArray from\"C:/Users/bount/Documents/GitHub/Thinkful-Flashcard-App/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";//--------------IMPORTS-----------------\nimport React,{useState}from\"react\";import classNames from\"../../utils/class-names\";import\"./FlashCard.css\";//--------------FUNCTION AND COMPONENTS-----------------\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function FlashCard(_ref){var handleNext=_ref.handleNext,_ref$deck=_ref.deck,deck=_ref$deck===void 0?{cards:[]}:_ref$deck,_ref$cardId=_ref.cardId,cardId=_ref$cardId===void 0?0:_ref$cardId;var cards=deck.cards;var card=cards[cardId]||{};var _useState=useState(true),_useState2=_slicedToArray(_useState,2),side=_useState2[0],setSide=_useState2[1];// flipCard function will set the side to the opposite of what it is. If side is true, then it will be false. If side is false, then it will be true.\nfunction flipCard(){setSide(!side);}// assign nextButton variable to a button element. If side is false, then the button will be displayed. Otherwise, it will be an empty string.\nvar nextButton=!side?/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-primary btn-next\",onClick:function onClick(){setSide(true);handleNext();},children:\"Next\"}):\"\";//--------------RETURN-----------------\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"card my-1 front\",children:/*#__PURE__*/_jsxs(\"div\",{className:classNames({\"card-body\":true,front:side,back:!side}),children:[/*#__PURE__*/_jsxs(\"h5\",{className:\"card-title\",children:[\"Card \",cardId+1,\" of \",cards.length]}),/*#__PURE__*/_jsx(\"p\",{className:\"card-text front-text\",children:card.front}),/*#__PURE__*/_jsx(\"p\",{className:\"card-text back-text\",children:card.back}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-secondary\",onClick:flipCard,children:\"Flip\"}),nextButton]})});//-----------------END RETURN---------------------\n}//------------END FUNCTION AND COMPONENTS-----------------\n//---------------------EXPORT-----------------\nexport default FlashCard;","map":{"version":3,"names":["React","useState","classNames","FlashCard","handleNext","deck","cards","cardId","card","side","setSide","flipCard","nextButton","front","back","length"],"sources":["C:/Users/bount/Documents/GitHub/Thinkful-Flashcard-App/src/Layout/Cards/FlashCard.js"],"sourcesContent":["//--------------IMPORTS-----------------\r\n\r\nimport React, { useState } from \"react\";\r\nimport classNames from \"../../utils/class-names\";\r\nimport \"./FlashCard.css\";\r\n\r\n\r\n//--------------FUNCTION AND COMPONENTS-----------------\r\nfunction FlashCard({ handleNext, deck = { cards: [] }, cardId = 0 }) {\r\n  const { cards } = deck;\r\n  const card = cards[cardId] || {};\r\n  const [side, setSide] = useState(true);\r\n// flipCard function will set the side to the opposite of what it is. If side is true, then it will be false. If side is false, then it will be true.\r\n  function flipCard() {\r\n    setSide(!side);\r\n  }\r\n// assign nextButton variable to a button element. If side is false, then the button will be displayed. Otherwise, it will be an empty string.\r\n  const nextButton = !side ? (\r\n    <button\r\n      className='btn btn-primary btn-next'\r\n      onClick={() => {\r\n        setSide(true);\r\n        handleNext();\r\n      }}\r\n    >\r\n      Next\r\n    </button>\r\n  ) : (\r\n    \"\"\r\n  );\r\n  //--------------RETURN-----------------\r\n  return (\r\n    <div className='card my-1 front'>\r\n      <div\r\n        className={classNames({ \"card-body\": true, front: side, back: !side })}\r\n      >\r\n        <h5 className='card-title'>\r\n          Card {cardId + 1} of {cards.length}\r\n        </h5>\r\n        <p className='card-text front-text'>{card.front}</p>\r\n        <p className='card-text back-text'>{card.back}</p>\r\n        <button className='btn btn-secondary' onClick={flipCard}>\r\n          Flip\r\n        </button>\r\n        {nextButton}\r\n      </div>\r\n    </div>\r\n  );\r\n  //-----------------END RETURN---------------------\r\n}\r\n//------------END FUNCTION AND COMPONENTS-----------------\r\n\r\n//---------------------EXPORT-----------------\r\n\r\n\r\nexport default FlashCard;"],"mappings":"4IAAA;AAEA,MAAOA,MAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAOC,WAAU,KAAM,yBAAyB,CAChD,MAAO,iBAAiB,CAGxB;AAAA,wFACA,QAASC,UAAS,MAAmD,IAAhDC,WAAU,MAAVA,UAAU,gBAAEC,IAAI,CAAJA,IAAI,oBAAG,CAAEC,KAAK,CAAE,EAAG,CAAC,4BAAEC,MAAM,CAANA,MAAM,sBAAG,CAAC,aAC/D,GAAQD,MAAK,CAAKD,IAAI,CAAdC,KAAK,CACb,GAAME,KAAI,CAAGF,KAAK,CAACC,MAAM,CAAC,EAAI,CAAC,CAAC,CAChC,cAAwBN,QAAQ,CAAC,IAAI,CAAC,wCAA/BQ,IAAI,eAAEC,OAAO,eACtB;AACE,QAASC,SAAQ,EAAG,CAClBD,OAAO,CAAC,CAACD,IAAI,CAAC,CAChB,CACF;AACE,GAAMG,WAAU,CAAG,CAACH,IAAI,cACtB,eACE,SAAS,CAAC,0BAA0B,CACpC,OAAO,CAAE,kBAAM,CACbC,OAAO,CAAC,IAAI,CAAC,CACbN,UAAU,EAAE,CACd,CAAE,UACH,MAED,EAAS,CAET,EACD,CACD;AACA,mBACE,YAAK,SAAS,CAAC,iBAAiB,uBAC9B,aACE,SAAS,CAAEF,UAAU,CAAC,CAAE,WAAW,CAAE,IAAI,CAAEW,KAAK,CAAEJ,IAAI,CAAEK,IAAI,CAAE,CAACL,IAAK,CAAC,CAAE,wBAEvE,YAAI,SAAS,CAAC,YAAY,WAAC,OACpB,CAACF,MAAM,CAAG,CAAC,CAAC,MAAI,CAACD,KAAK,CAACS,MAAM,GAC/B,cACL,UAAG,SAAS,CAAC,sBAAsB,UAAEP,IAAI,CAACK,KAAK,EAAK,cACpD,UAAG,SAAS,CAAC,qBAAqB,UAAEL,IAAI,CAACM,IAAI,EAAK,cAClD,eAAQ,SAAS,CAAC,mBAAmB,CAAC,OAAO,CAAEH,QAAS,UAAC,MAEzD,EAAS,CACRC,UAAU,GACP,EACF,CAER;AACF,CACA;AAEA;AAGA,cAAeT,UAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}