{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/bount/Documents/GitHub/Thinkful-Flashcard-App/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/bount/Documents/GitHub/Thinkful-Flashcard-App/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/Users/bount/Documents/GitHub/Thinkful-Flashcard-App/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";//-------------------START IMPORTS---------------------------\nimport React,{useEffect,useState}from\"react\";import{Link,useHistory,useParams}from\"react-router-dom\";import DeckForm from\"./DeckForm\";import{readDeck,updateDeck}from\"../../utils/api/index\";//-------------------END IMPORTS---------------------------\n//-------------------START FUNCTION EDITDECK---------------------------\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function EditDeck(){var history=useHistory();var _useParams=useParams(),deckId=_useParams.deckId;var _useState=useState({}),_useState2=_slicedToArray(_useState,2),deck=_useState2[0],setDeck=_useState2[1];var name=deck.name?deck.name:\"Deck Name\";// if name is equal to deck.name, then return deck.name, if not, then return \"Deck Name\"\nuseEffect(function(){//One useEffect for both loading the deck and the card as they are connected and should both be aborted when leaving this Component\nvar abortController=new AbortController();//assign a variable abortController to the result of AbortController\nfunction loadDeck(){return _loadDeck.apply(this,arguments);}function _loadDeck(){_loadDeck=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var deckInfo;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return readDeck(deckId,abortController.signal);case 3:deckInfo=_context.sent;//await the result of readDeck and assign it to deckInfo\nsetDeck(deckInfo);//set the value of deck to deckInfo\n_context.next=14;break;case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);if(!(_context.t0.name===\"AbortError\")){_context.next=13;break;}//if the error name is equal to AbortError, then the console will log aborted\nconsole.info(\"aborted\");_context.next=14;break;case 13:throw _context.t0;case 14:case\"end\":return _context.stop();}}},_callee,null,[[0,7]]);}));return _loadDeck.apply(this,arguments);}loadDeck();//call the loadDeck function\nreturn function(){return abortController.abort();};},[deckId]);function handleSubmit(deck){//handleSubmit function that takes in deck as a parameter\nvar abortController=new AbortController();//assign a variable abortController to the result of AbortController\n// create an async function called editDeck that will be called when the handleSubmit function is called\nfunction editDeck(){return _editDeck.apply(this,arguments);}function _editDeck(){_editDeck=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var deckInfo;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return updateDeck(deck,abortController.signal);case 3:deckInfo=_context2.sent;//await the result of updateDeck and assign it to deckInfo\nhistory.push(\"/decks/\".concat(deckInfo.id));_context2.next=14;break;case 7:_context2.prev=7;_context2.t0=_context2[\"catch\"](0);if(!(_context2.t0.name===\"AbortError\")){_context2.next=13;break;}//if the error name is equal to AbortError, then the console will log aborted\nconsole.info(\"aborted\");_context2.next=14;break;case 13:throw _context2.t0;case 14:case\"end\":return _context2.stop();}}},_callee2,null,[[0,7]]);}));return _editDeck.apply(this,arguments);}editDeck();//call the editDeck function\nreturn function(){//return the abortController.abort function\nabortController.abort();//abort the controller\n};}function handleCancel(){//handleCancel function that will be called when the cancel button is clicked\nhistory.push(\"/decks/\".concat(deckId));//push the user to the deck page\n}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"nav\",{\"aria-label\":\"breadcrumb\",children:/*#__PURE__*/_jsxs(\"ol\",{className:\"breadcrumb\",children:[/*#__PURE__*/_jsx(\"li\",{className:\"breadcrumb-item\",children:/*#__PURE__*/_jsxs(Link,{to:\"/\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"oi oi-home\"}),\" Home\"]})}),/*#__PURE__*/_jsx(\"li\",{className:\"breadcrumb-item\",children:/*#__PURE__*/_jsx(Link,{to:\"/decks/\".concat(deckId),children:name})}),/*#__PURE__*/_jsx(\"li\",{className:\"breadcrumb-item active\",\"aria-current\":\"page\",children:\"Edit Deck\"})]})}),/*#__PURE__*/_jsx(\"h1\",{children:\"Edit Deck\"}),/*#__PURE__*/_jsx(DeckForm,{handleSubmit:handleSubmit,handleCancel:handleCancel,deck:deck})]});// -------------------END RETURN---------------------------\n}//-------------------END FUNCTION EDITDECK---------------------------\n//--------------EXPORT-----------------\nexport default EditDeck;","map":{"version":3,"names":["React","useEffect","useState","Link","useHistory","useParams","DeckForm","readDeck","updateDeck","EditDeck","history","deckId","deck","setDeck","name","abortController","AbortController","loadDeck","signal","deckInfo","console","info","abort","handleSubmit","editDeck","push","id","handleCancel"],"sources":["C:/Users/bount/Documents/GitHub/Thinkful-Flashcard-App/src/Layout/Decks/EditDeck.js"],"sourcesContent":["//-------------------START IMPORTS---------------------------\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport DeckForm from \"./DeckForm\";\r\nimport { readDeck, updateDeck } from \"../../utils/api/index\";\r\n//-------------------END IMPORTS---------------------------\r\n\r\n//-------------------START FUNCTION EDITDECK---------------------------\r\nfunction EditDeck() {\r\n\tconst history = useHistory();\r\n\tconst { deckId } = useParams();\r\n\tconst [deck, setDeck] = useState({});\r\n\r\n\tconst name = deck.name ? deck.name : \"Deck Name\"; // if name is equal to deck.name, then return deck.name, if not, then return \"Deck Name\"\r\n\r\n\tuseEffect(() => {\r\n\t\t//One useEffect for both loading the deck and the card as they are connected and should both be aborted when leaving this Component\r\n\t\tconst abortController = new AbortController(); //assign a variable abortController to the result of AbortController\r\n\r\n\t\tasync function loadDeck() {\r\n\t\t\t//Load the deck for navbar information\r\n\t\t\ttry {\r\n\t\t\t\t//try to load the deck\r\n\t\t\t\tconst deckInfo = await readDeck(deckId, abortController.signal); //await the result of readDeck and assign it to deckInfo\r\n\t\t\t\tsetDeck(deckInfo); //set the value of deck to deckInfo\r\n\t\t\t} catch (error) {\r\n\t\t\t\t//if error is thrown, then the error will be caught and the error will be thrown\r\n\t\t\t\tif (error.name === \"AbortError\") {\r\n\t\t\t\t\t//if the error name is equal to AbortError, then the console will log aborted\r\n\t\t\t\t\tconsole.info(\"aborted\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//if the error name is not equal to AbortError, then the error will be thrown\r\n\t\t\t\t\tthrow error;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tloadDeck(); //call the loadDeck function\r\n\r\n\t\treturn () => abortController.abort();\r\n\t}, [deckId]);\r\n\r\n\tfunction handleSubmit(deck) {\r\n\t\t//handleSubmit function that takes in deck as a parameter\r\n\t\tconst abortController = new AbortController(); //assign a variable abortController to the result of AbortController\r\n\t\t// create an async function called editDeck that will be called when the handleSubmit function is called\r\n\t\tasync function editDeck() {\r\n\t\t\ttry {\r\n\t\t\t\tconst deckInfo = await updateDeck(deck, abortController.signal); //await the result of updateDeck and assign it to deckInfo\r\n\t\t\t\thistory.push(`/decks/${deckInfo.id}`);\r\n\t\t\t} catch (err) {\r\n\t\t\t\tif (err.name === \"AbortError\") {\r\n\t\t\t\t\t//if the error name is equal to AbortError, then the console will log aborted\r\n\t\t\t\t\tconsole.info(\"aborted\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow err; //if the error name is not equal to AbortError, then the error will be thrown\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\teditDeck(); //call the editDeck function\r\n\r\n\t\treturn () => {\r\n\t\t\t//return the abortController.abort function\r\n\t\t\tabortController.abort(); //abort the controller\r\n\t\t};\r\n\t}\r\n\tfunction handleCancel() {\r\n\t\t//handleCancel function that will be called when the cancel button is clicked\r\n\t\thistory.push(`/decks/${deckId}`); //push the user to the deck page\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{/* These html elements and classes are the same as the other files.. comments for code is the same */}\r\n\t\t\t<nav aria-label=\"breadcrumb\">\r\n\t\t\t\t<ol className=\"breadcrumb\">\r\n\t\t\t\t\t<li className=\"breadcrumb-item\">\r\n\t\t\t\t\t\t<Link to=\"/\">\r\n\t\t\t\t\t\t\t<span className=\"oi oi-home\"></span> Home\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"breadcrumb-item\">\r\n\t\t\t\t\t\t<Link to={`/decks/${deckId}`}>{name}</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li\r\n\t\t\t\t\t\tclassName=\"breadcrumb-item active\"\r\n\t\t\t\t\t\taria-current=\"page\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tEdit Deck\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ol>\r\n\t\t\t</nav>\r\n\t\t\t<h1>Edit Deck</h1>\r\n\t\t\t<DeckForm\r\n\t\t\t\thandleSubmit={handleSubmit}\r\n\t\t\t\thandleCancel={handleCancel}\r\n\t\t\t\tdeck={deck}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n\t// -------------------END RETURN---------------------------\r\n}\r\n//-------------------END FUNCTION EDITDECK---------------------------\r\n\r\n//--------------EXPORT-----------------\r\nexport default EditDeck;\r\n"],"mappings":"obAAA;AAEA,MAAOA,MAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,OAASC,IAAI,CAAEC,UAAU,CAAEC,SAAS,KAAQ,kBAAkB,CAC9D,MAAOC,SAAQ,KAAM,YAAY,CACjC,OAASC,QAAQ,CAAEC,UAAU,KAAQ,uBAAuB,CAC5D;AAEA;AAAA,wFACA,QAASC,SAAQ,EAAG,CACnB,GAAMC,QAAO,CAAGN,UAAU,EAAE,CAC5B,eAAmBC,SAAS,EAAE,CAAtBM,MAAM,YAANA,MAAM,CACd,cAAwBT,QAAQ,CAAC,CAAC,CAAC,CAAC,wCAA7BU,IAAI,eAAEC,OAAO,eAEpB,GAAMC,KAAI,CAAGF,IAAI,CAACE,IAAI,CAAGF,IAAI,CAACE,IAAI,CAAG,WAAW,CAAE;AAElDb,SAAS,CAAC,UAAM,CACf;AACA,GAAMc,gBAAe,CAAG,GAAIC,gBAAe,EAAE,CAAE;AAAA,QAEhCC,SAAQ,oIAAvB,wLAIyBV,SAAQ,CAACI,MAAM,CAAEI,eAAe,CAACG,MAAM,CAAC,QAAzDC,QAAQ,eAAmD;AACjEN,OAAO,CAACM,QAAQ,CAAC,CAAE;AAAA,oFAGf,YAAML,IAAI,GAAK,YAAY,2BAC9B;AACAM,OAAO,CAACC,IAAI,CAAC,SAAS,CAAC,CAAC,qHAM1B,2CAEDJ,QAAQ,EAAE,CAAE;AAEZ,MAAO,kBAAMF,gBAAe,CAACO,KAAK,EAAE,GACrC,CAAC,CAAE,CAACX,MAAM,CAAC,CAAC,CAEZ,QAASY,aAAY,CAACX,IAAI,CAAE,CAC3B;AACA,GAAMG,gBAAe,CAAG,GAAIC,gBAAe,EAAE,CAAE;AAC/C;AAAA,QACeQ,SAAQ,oIAAvB,+LAEyBhB,WAAU,CAACI,IAAI,CAAEG,eAAe,CAACG,MAAM,CAAC,QAAzDC,QAAQ,gBAAmD;AACjET,OAAO,CAACe,IAAI,kBAAWN,QAAQ,CAACO,EAAE,EAAG,CAAC,wFAElC,aAAIZ,IAAI,GAAK,YAAY,4BAC5B;AACAM,OAAO,CAACC,IAAI,CAAC,SAAS,CAAC,CAAC,yHAK1B,2CACDG,QAAQ,EAAE,CAAE;AAEZ,MAAO,WAAM,CACZ;AACAT,eAAe,CAACO,KAAK,EAAE,CAAE;AAC1B,CAAC,CACF,CACA,QAASK,aAAY,EAAG,CACvB;AACAjB,OAAO,CAACe,IAAI,kBAAWd,MAAM,EAAG,CAAE;AACnC,CAEA,mBACC,oCAEC,YAAK,aAAW,YAAY,uBAC3B,YAAI,SAAS,CAAC,YAAY,wBACzB,WAAI,SAAS,CAAC,iBAAiB,uBAC9B,MAAC,IAAI,EAAC,EAAE,CAAC,GAAG,wBACX,aAAM,SAAS,CAAC,YAAY,EAAQ,QACrC,GAAO,EACH,cACL,WAAI,SAAS,CAAC,iBAAiB,uBAC9B,KAAC,IAAI,EAAC,EAAE,kBAAYA,MAAM,CAAG,UAAEG,IAAI,EAAQ,EACvC,cACL,WACC,SAAS,CAAC,wBAAwB,CAClC,eAAa,MAAM,UACnB,WAED,EAAK,GACD,EACA,cACN,oBAAI,WAAS,EAAK,cAClB,KAAC,QAAQ,EACR,YAAY,CAAES,YAAa,CAC3B,YAAY,CAAEI,YAAa,CAC3B,IAAI,CAAEf,IAAK,EACV,GACG,CAEP;AACD,CACA;AAEA;AACA,cAAeH,SAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}